package bank.recommendationservice.fintech.repository;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.jdbc.core.JdbcTemplate;

import java.util.UUID;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.when;

class RecommendationsRepositoryTest {
    // –Ω—É–∂–Ω–æ –±—ã–ª–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ—á–Ω–æ –ª–∏ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç üôÇ : bogomolova
    @Mock
    private JdbcTemplate jdbcTemplate;

    @InjectMocks
    private RecommendationsRepository recommendationsRepository;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testGetRandomTransactionAmount_ReturnsAmount() {
        UUID userId = UUID.randomUUID();
        int expectedAmount = 100;

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è mock-–æ–±—ä–µ–∫—Ç–∞ jdbcTemplate
        when(jdbcTemplate.queryForObject(anyString(), eq(Integer.class), eq(userId))).thenReturn(expectedAmount);

        // –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞
        int actualAmount = recommendationsRepository.getRandomTransactionAmount(userId);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        assertEquals(expectedAmount, actualAmount);
    }

    @Test
    public void testGetRandomTransactionAmount_ReturnsZero_WhenNoResult() {
        UUID userId = UUID.randomUUID();

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è mock-–æ–±—ä–µ–∫—Ç–∞ jdbcTemplate –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ null
        when(jdbcTemplate.queryForObject(anyString(), eq(Integer.class), eq(userId))).thenReturn(null);

        // –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞
        int actualAmount = recommendationsRepository.getRandomTransactionAmount(userId);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        assertEquals(0, actualAmount);
    }


}